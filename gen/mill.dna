
./!include "gen/clexer.rb"

#
# Copyright (c) 2014 Martin Sustrik  All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom
# the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#

################################################################################
# Parse command line arguments.                                                #
################################################################################

if ARGV.size < 1
    $stderr.write "usage: mill [options] <input-file>\n"
    exit 1
end

$input_filename = ARGV[-1]
if $input_filename.size < 4 || ![".mh", ".mc"].include?($input_filename[-3..-1])
    $stderr.write "Only files with .mh and .mc extensions are valid mill input files.\n"
    exit 1
else
    $output_filename = $input_filename[0..-4] + "." + $input_filename[-1..-1]
end

$system = false
for opt in ARGV[0..-2]
    if opt == "--system"
        $system = true;
    else
        $stderr.write "Unknown option #{opt}\n"
        exit 1
    end
end

################################################################################
# Helper functions and debugging tools.                                        #
################################################################################

# Dump the tokens to the stdout.
def dump(text, tokens)
    for t in tokens
        puts "#{t[0]}, #{t[1]}, #{t[2]}, \"#{text[t[1]..t[2]]}\""
        if t[3] != nil
            dump(text, t[3])
        end
    end
end

# Shift positions of all tokens beyond 'start' token by 'offset' characters.
def apply_offset(tokens, start, offset)
    for t in tokens
        t[1] += offset if t[1] > start
        t[2] += offset if t[2] > start
        if t[3] != nil
            apply_offset(t[3], start, offset)
        end
    end
end

# Replace specific characters in the text by a different text.
def replacechars(text, tokens, start, stop, newtext)

    # Determine the offset of the token in the line.
    pos = start
    while pos != 0 && text[pos] != ?\n
       pos = pos - 1
    end
    if pos == 0
        offset = start
    else
        offset = start - pos - 1
    end

    # Indent all lines in the text except for the first one by the offset.
    newtext = newtext.gsub("\n", "\n" + (" " * offset))

    text[start..stop] = newtext
    offset = newtext.size - (stop - start + 1)
    apply_offset(tokens, start, offset)
end

# Replace specific token in the text by a different text.
def replace(text, tokens, token, newtext)
    replacechars(text, tokens, token[1], token[2], newtext)
end

# Insert specified string at the give position in the text.
def insert(text, tokens, pos, newtext)
    text.insert(pos, newtext)
    apply_offset(tokens, pos, newtext.size)
end

# Split variable declaration into its constituent parts.
def parsedecl(text, tokens)
    i = tokens.size - 1
    loop do
        if i <= 0
            $stderr.write "Invalid declaration.\n"
            exit 1
        end
        break if tokens[i][0] != :sbraces
        i -= 1
    end
    if tokens[i][0] != :identifier
        $stderr.write "Invalid declaration.\n"
        exit 1
    end
    return {
        :type => text[tokens[0][1]..tokens[i - 1][2]],
        :name => text[tokens[i][1]..tokens[i][2]],
        :postfix => (i == tokens.size - 1 ? "" :
            text[tokens[i + 1][1]..tokens.last[2]])
    }
end

# Split variable declaration with optional initialisation.
def parsedeclinit(text, tokens)
    for i in 0..tokens.size - 1
        if tokens[i][0] == :eq
            t = parsedecl(text, tokens[0..i - 1])
            t[:init] = text[tokens[i + 1][1]..tokens.last[2]]
            return t
        end
    end
    return parsedecl(text, tokens)
end

# Split variable declaration with optional out part into its constituent parts.
def parsedeclout (text, tokens)
    if tokens[0][0] != :out
        decl = parsedecl(text, tokens)
        decl[:out] = false
    else
        decl = parsedecl(text, tokens [1..-1])
        type = decl[:type].strip
        if type[-1] != ?*
            $stderr.write "Out argument must be a pointer.\n"
            exit 1
        end
        type = type[0..-2]
        decl[:out] = true
        decl[:type] = type
    end
    return decl;
end

def renderarg(arg)

    if arg[:out]
.       @{arg[:type]} *@{arg[:name]}@{arg[:postfix]}
    else
.       @{arg[:type]} @{arg[:name]}@{arg[:postfix]}
    end
end

################################################################################
# Tokenise the input file.                                                     #
################################################################################

text = IO.read($input_filename)
tokens = parse(text)

################################################################################
# Make sure that the program won't collide with mill's internal variables.     #
# The user is not supposed to use identifiers with mill_* prefix.              #
# (Unless --system option was specified on the command line.)                  #
################################################################################

begin
    def check(text, tokens)
        for t in tokens
            if t[0] == :identifier
                name = text[t[1]..t[2]]
                if name.size >= 5 && name[0..4] == "mill_"
                    $stderr.write "Identifiers can't start with mill_ prefix.\n"
                    exit 1
                end
            end
            if t[3] != nil
                check(text, t[3])
            end
        end
    end
    if !$system
        check(text, tokens)
    end
end

################################################################################
#  Now we'll traverse the mill file and split it into different sections.      #
################################################################################

# Current position in the token array.
i = 0

# Sections array will consist of the following items
# :rawc        Section containing raw C code
# :coroutine   Coroutine declaration or definition
# :alias       Coroutine alias ("coroutine x = y")
sections = []

################################################################################
#  Split the text into coroutine definitions and interleaved chunks of raw C.  #
################################################################################

i = 0
loop do

    # Find the start of next coroutine.
    # Treat anything that precedes it as raw C code.
    cstart = i
    cstop = nil
    cotype = nil
    cotext = nil
    cotokens = nil

    loop do

        if tokens[i][0] == :end
            cstop = i
            break;
        end

        if(tokens[i][0] == :coroutine &&
              tokens [i + 1][0] == :identifier &&
              tokens[i + 2][0] == :braces &&
              (tokens[i + 3][0] == :cbraces || tokens[i + 3][0] == :semicolon))
            cstop = i
            cotype = :coroutine
            cotext = text[tokens[i][1]..tokens[i + 3][2]]
            cotokens = tokens[i..i + 3]
            i += 4
            break;
        end

        if(tokens[i][0] == :coroutine &&
              tokens [i + 1][0] == :identifier &&
              tokens[i + 2][0] == :eq &&
              tokens[i + 3][0] == :identifier &&
              tokens [i + 4][0] == :semicolon)
            cstop = i
            cotype = :alias
            cotext = text[tokens[i][1]..tokens[i + 4][2]]
            cotokens = tokens[i..i + 4]
            i += 5
            break;
        end

        i += 1;
    end

    # Chunk of raw C.
    if cstart != cstop
        sections << {
            :type => :rawc,
            :text => text[tokens[cstart][1]..tokens[cstop][1] - 1],
            :tokens => tokens[cstart..cstop - 1]
        }
        apply_offset(sections.last[:tokens], 0, -sections.last[:tokens][0][1])
    end

    # End of file.
    break if i == cstop

    # Create the coroutine section.
    sections << {
        :type => cotype,
        :text => cotext,
        :tokens => cotokens
    }
    apply_offset(sections.last[:tokens], 0, -sections.last[:tokens][0][1])

end

################################################################################
#  Process raw C code. There's nothing to do except replacing coroutines       #
#  by the corresponding C structs.                                             #
################################################################################

begin
    def expand_coroutines(text, alltokens, tokens)
        for i in 0..tokens.size - 1
            if tokens[i][0] == :coroutine
                if tokens[i + 1][0] != :identifier
                    $syserr.write "'coroutine' keyword should be followed by the coroutine name.\n"
                    exit 1
                end
                name = text[tokens[i + 1][1]..tokens[i + 1][2]]
                replace(text, alltokens, tokens[i], "struct mill_coroutine_#{name}")
                replace(text, alltokens, tokens[i + 1], "")
            end
            if tokens[i][3] != nil
                expand_coroutines(text, alltokens, tokens[i][3])
            end
        end
    end

    for s in sections
        if s[:type] == :rawc
            expand_coroutines(s[:text], s[:tokens], s[:tokens])
        end
    end
end

################################################################################
#  Process coroutine sections.                                                 #
################################################################################

for i in 0..sections.size - 1
    if sections[i][:type] == :coroutine
        text = sections[i][:text]
        tokens = sections[i][:tokens]

        # Coroutine name.
        name = text[tokens[1][1]..tokens[1][2]]

        # Coroutine argument list.
        args = []
        argtokens = tokens[2][3]
        start = 0
        for j in 0..argtokens.size - 1
            break if argtokens[j][0] == :end && j == start
            if [:comma, :end].include? argtokens[j][0]
                args << parsedeclout(text, argtokens[start..j - 1])
                start = j + 1
            end
        end

        if tokens[3][0] == :cbraces

            # Coroutine body. Split it into variables part and the executable
            # code. 'endvars' statement is the delimiter between the two.
            bodytokens = tokens[3][3]
            bodytokens.unshift [:whitespace, tokens [3][1] + 1,
                bodytokens[0][1] - 1]
            for j in 1..bodytokens.size - 1
                break if bodytokens[j][0] == :endvars
            end
            if j == bodytokens.size - 1
                j = 0
            else
                if bodytokens[j + 1][0] != :semicolon
                    $stderr.write "'endvars' must be followed by a semicolon.\n"
                    exit 1
                end
            end

            # Parse the local variables.
            vars = []
            start = 1
            for k in 1..j
                if bodytokens[k][0] == :semicolon
                    vars << parsedeclinit(text, bodytokens[start..k - 1])
                    start = k + 1
                end
            end

            # Leave only the executable code in text & tokens.
            if bodytokens[j][0] == :endvars
                j += 1
                wstoken = [:whitespace, bodytokens [j][2] + 1,
                    bodytokens[j + 1][1] - 1]
                bodytokens = bodytokens[j + 1..-1]
                bodytokens.unshift(wstoken)
            end
            text = text[bodytokens[0][1]..bodytokens[-2][2]]
            apply_offset(bodytokens, 0, -bodytokens[0][1])

            # Coroutine definition.
            sections[i] = {
                :type => :codef,
                :name => name,
                :args => args,
                :vars => vars,
                :text => text,
                :tokens => bodytokens
            }

        else

            # Coroutine declaration.
            sections[i] = {
                :type => :codecl,
                :name => name,
                :args => args
            }

        end
    end
end

################################################################################
#  Process alias sections.                                                     #
################################################################################

for i in 0..sections.size - 1
    if sections[i][:type] == :alias
        text = sections[i][:text]
        tokens = sections[i][:tokens]
        new = text[tokens[1][1]..tokens[1][2]]
        old = text[tokens[3][1]..tokens[3][2]]
        sections[i] = {
            :type => :alias,
            :old => old,
            :new => new
        }
    end
end

################################################################################
# Process the executable parts of the coroutines.                              #
################################################################################

def epilogue(lastpc)
    res = "\n"
    res += "mill_finally:\n"
    res += "    mill_cancel_children (cf);\n"
    res += "    cf->mill_cfh.pc = #{lastpc + 1};\n"
    res += "    goto mill_test_children;\n"
    res += "mill_pc_#{lastpc + 1}:\n"
    res += "    mill_coframe_term (event);\n"
    res += "mill_test_children:\n"
    res += "    if (mill_has_children (cf))\n"
    res += "        return 0;\n"
    res += "    mill_emit (cf);\n"
    res += "    cf->mill_cfh.pc = #{lastpc + 2};\n"
    res += "    return 0;\n"
    res += "mill_pc_#{lastpc + 2}:\n"
    res += "    assert (!event);\n"
    return res
end

def expand_case(pc, type, first)
    res = ""
    if !first
        res += "    goto mill_endselect_#{pc};\n"
        res += "}\n"
        res += "else "
    end
    res += "if (mill_typeof(event) == &mill_type_#{type}) {\n"
    res += "    mill_coframe_term (event);"
    return res
end

def expand_cancel(pc, first)
    res = ""
    if !first
        res += "    goto mill_endselect_#{pc};\n"
        res += "}\n"
        res += "else "
    end
    res += "if (event == 0) {"
    return res
end

def beginselect(pc)
    res = ""
    res += "{\n"
    res += "cf->mill_cfh.pc = #{pc};\n"
    res += "return 0;\n"
    res += "mill_pc_#{pc}:"
    return res;
end

def endselect(pc, first, hascancelclause)
    res = ""
    if !first
        res += "    goto mill_endselect_#{pc};\n"
        res += "}\n"
        res += "else "
    end
    if !hascancelclause
        res += "if (event == 0)\n"
        res += "    goto mill_finally;\n"
        res += "else"
    end
    res += "\n"
    res += "    return -1;\n"
    res += "mill_endselect_#{pc}:;\n"
    res += "}"
    return res
end

for s in sections
    if s[:type] == :codef

        # Expand references to the local variables.
        def expand_vars(text, alltokens, tokens, locals, outs)
            for i in 0..tokens.size - 1
                if tokens[i][0] == :identifier && (i == 0 ||
                      (tokens[i - 1][0] != :struct &&
                       tokens[i - 1][0] != :dot &&
                       tokens[i - 1][0] != :arrow))
                    idname = text[tokens[i][1]..tokens[i][2]]
                    if locals.include? idname
                        replace(text, alltokens, tokens[i], "(cf->#{idname})")
                    elsif outs.include? idname
                        replace(text, alltokens, tokens[i], "(&cf->#{idname})")
                    end
                elsif tokens[i][3] != nil
                    expand_vars(text, alltokens, tokens[i][3], locals, outs)
                end
            end
        end
        locals = []
        outs = []
        for a in s[:args]
            if a[:out]
                outs << a[:name]
            else
                locals << a[:name]
            end
        end
        for v in s[:vars]
            locals << v[:name]
        end
        expand_vars(s[:text], s[:tokens], s[:tokens], locals, outs)

        # Expand mill keywords.
        def expand_keywords(text, alltokens, tokens, pc)
            for i in 0..tokens.size - 1

                if tokens[i][0] == :go
                    start = i
                    i += 1
                    if tokens[i][0] != :identifier
                        $stderr.write "'go' keyword should be followed by coroutine name.\n"
                        exit 1
                    end
                    name = text[tokens[i][1]..tokens[i][2]]
                    i += 1
                    if tokens[i][0] != :braces
                        $stderr.write "Argument list missing after 'go'.\n"
                        exit 1
                    end

                    replace(text, alltokens, tokens[start], "mill_go_#{name}")
                    replace(text, alltokens, tokens[i - 1], "")
                    delim = tokens[i][3].size == 1 ? "" : ", ";
                    insert(text, alltokens, tokens[i][1] + 1, "&mill_type_#{name}, cf->mill_cfh.loop, cf#{delim}")

                elsif tokens[i][0] == :select
                    if tokens[i + 1][0] != :cbraces
                        $stderr.write "'select' should be followed by a curly brace.\n"
                        exit 1
                    end
                    pc += 1
                    replace(text, alltokens, tokens[i], beginselect(pc))
                    replacechars(text, alltokens, tokens[i + 1][1], tokens[i + 1][1], "")
                    subtokens = tokens[i + 1][3]
                    if subtokens[0][0] != :case && subtokens[0][0] != :cancel
                        $stderr.write "'select' block should start with 'case' statement.\n"
                        exit 1
                    end
                    first = true
                    hascancelclause = false
                    for j in 0..subtokens.size - 1
                        if subtokens[j][0] == :case
                            if subtokens[j + 1][0] != :identifier || subtokens[j + 2][0] != :colon
                                $stderr.write "'case' keyword should be followed by a coroutine name and a colon.\n"
                                exit 1
                            end
                            replacechars(text, alltokens,
                                subtokens[j][1], subtokens[j + 2][2],
                                expand_case(pc, text[subtokens[j + 1][1]..subtokens[j + 1][2]], first))
                            first = false
                        elsif subtokens [j][0] == :cancel
                            if subtokens[j + 1][0] != :colon
                                $stderr.write "'cancel' keyword should be followed by a colon.\n"
                                exit 1
                            end
                            if hascancelclause
                                $stderr.write "Duplicit 'cancel' clause.\n"
                                exit 
                            end
                            replacechars(text, alltokens,
                                subtokens[j][1], subtokens[j + 1][2],
                                expand_cancel(pc, first))
                            first = false
                            hascancelclause = true
                        end
                    end
                    replacechars(text, alltokens,
                        tokens[i + 1][2], tokens[i + 1][2],
                        endselect(pc, first, hascancelclause))

                elsif tokens[i][0] == :syswait && $system
                    if tokens[i + 1][0] != :braces
                        $stderr.write "'syswait' should be followed by argument list.\n"
                        exit 1
                    end
                    replace(text, alltokens, tokens[i], "mill_syswait")
                    pc += 1
                    insert(text, alltokens, tokens[i + 1][1] + 1, "#{pc}")

                elsif tokens[i][0] == :return
                    replace(text, alltokens, tokens[i], "goto mill_finally")

                # Built-in support for stdmill library.
                elsif(tokens[i][0] == :identifier &&
                        ["tcpsocket_init"].include?(text[tokens[i][1]..tokens[i][2]]) &&
                        tokens[i + 1][0] == :braces)
                    insert(text, alltokens, tokens[i + 1][2], ", cf->mill_cfh.loop")

                elsif tokens[i][3] != nil
                    pc = expand_keywords(text, alltokens, tokens[i][3], pc)
                end

            end
            return pc;
        end
        s[:lastpc] = expand_keywords(s[:text], s[:tokens], s[:tokens], 0)

        # Expand coroutine-level 'cancel' clause.
        s[:hascancel] = false
        for i in 0..s[:tokens].size - 2
            if s[:tokens][i][0] == :cancel && s[:tokens][i + 1][0] == :colon
                if s[:hascancel]
                    $stderr.write "Duplicit 'cancel' clause.\n"
                    exit 1
                end
                replace(s[:text], s[:tokens], s[:tokens][i], epilogue(s[:lastpc]))
                replace(s[:text], s[:tokens], s[:tokens][i + 1], "")
                s[:hascancel] = true
            end
        end
    end
end

################################################################################
# Generate the output file.                                                    #
################################################################################

./!output $output_filename

./* @{Time.now}:
.   This file was generated by mill from @{$input_filename} */
.
.#include "mill.h"
.
for s in sections

################################################################################
# First, deal with chunks of raw C code.                                       #
# These are copied to the output file verbatim.                                #
################################################################################

    if s[:type] == :rawc
.@{s[:text]}
.
    end

################################################################################
# Coroutine declarations.                                                      #
################################################################################

    if s[:type] == :codecl
.extern const struct mill_type mill_type_@{s[:name]};
.
.int mill_handler_@{s[:name]} (void *cfptr, void *event);
.
.void mill_output_@{s[:name]} (void *cfptr);
.
.void mill_go_@{s[:name]} (
.    const struct mill_type *type,
.    struct mill_loop *loop,
.    void *parent
        for a in s[:args]
.    /+,
.    @{renderarg(a)}
        end
./+);
.
.void @{s[:name]} (
./!separate ", "
        for a in s[:args]
.    @{renderarg(a)}
        end
./+);
.
    end

################################################################################
# Coroutine definitions.                                                       #
################################################################################

    if s[:type] == :codef
.struct mill_cf_@{s[:name]} {
.
.    /* Generic coframe header. */
.    struct mill_cfh mill_cfh;
        if !s[:args].empty?
.
.    /* Coroutine arguments. */
        end
        hasoutargs = false
        for a in s[:args]
.    @{a[:type]} @{a[:name]}@{a[:postfix]};
        hasoutargs = true if a[:out] == true
        end
        if !s[:vars].empty?
.
.    /* Local variables. */
        end
        for v in s[:vars]
.    @{v[:type]} @{v[:name]}@{v[:postfix]};
        end
        if hasoutargs
.
.    /* Destinations for out arguments. */
        end
        for a in s[:args]
            if a[:out]
.    @{a[:type]} *mill_out_@{a[:name]}@{a[:postfix]};
            end
        end
.};
.
.int mill_handler_@{s[:name]} (void *cfptr, void *event)
.{
.    struct mill_cf_@{s[:name]} *cf;
.
.    cf = (struct mill_cf_@{s[:name]}*) cfptr;
.
.    switch (cf->mill_cfh.pc) {
.    case 0:
.        break;
for i in 1..s[:lastpc] + 2
.    case @{i}:
.        goto mill_pc_@{i};
end
.    default:
.        assert (0);
.    }
.
if s[:hascancel]
.@{s[:text]}
else
.    @{s[:text]}
end
.
if !s[:hascancel]
.@{epilogue(s[:lastpc])}
end
.    cf->mill_cfh.pc = -1;
.    return 0;
.}
.
.void mill_output_@{s[:name]} (void *cfptr)
.{
.    struct mill_cf_@{s[:name]} *cf;
.
.    cf = (struct mill_cf_@{s[:name]}*) cfptr;    
for a in s[:args]
    if a[:out]
.    if (cf->mill_out_@{a[:name]})
.        *cf->mill_out_@{a[:name]} = cf->@{a[:name]};
    end
end
.}
.
.const struct mill_type mill_type_@{s[:name]} = {
.    mill_type_tag,
.    mill_handler_@{s[:name]},
.    mill_output_@{s[:name]},
.    "@{s[:name]}"
.};
.
.void mill_go_@{s[:name]} (
.    const struct mill_type *type,
.    struct mill_loop *loop,
.    void *parent
for a in s[:args]
.    /+,
.    @{renderarg(a)}
end
./+)
.{
.    struct mill_cf_@{s[:name]} *cf;
.
.    cf = malloc (sizeof (struct mill_cf_@{s[:name]}));
.    assert (cf);
.    mill_coframe_init (cf, type, parent, loop);
for a in s[:args]
    if a[:out]
.    cf->mill_out_@{a[:name]} = @{a[:name]};
    else
.    cf->@{a[:name]} = @{a[:name]};
    end
end
for v in s[:vars]
    if v[:init] != nil
.    cf->@{v[:name]} = @{v[:init]};
    end
end
.    mill_handler_@{s[:name]} (&cf->mill_cfh, 0);
.}
.
.void @{s[:name]} (
./!separate ", "
for a in s[:args]
.    @{renderarg(a)}
end
./+)
.{
.    struct mill_loop loop;
.
.    mill_loop_init (&loop);
.    mill_go_@{s[:name]} (&mill_type_@{s[:name]}, &loop, 0
for a in s[:args]
.    /+, @{a[:name]}
end
./+);
.    mill_loop_run (&loop);
.    mill_loop_term (&loop);
.}
.
    end

################################################################################
# Coroutine aliases.                                                           #
################################################################################

    if s[:type] == :alias
.const struct mill_type mill_type_@{s[:new]} = {
.    mill_type_tag,
.    mill_handler_@{s[:old]},
.    mill_output_@{s[:old]},
.    "@{s[:new]}"};
.
.#define mill_go_@{s[:new]} mill_go_@{s[:old]}
.#define @{s[:new]} @{s[:old]}
    end

end

