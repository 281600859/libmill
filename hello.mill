
#include <stdio.h>
#include <assert.h>
#include <uv.h>

char buf [4];

coroutine hello (int i)
{
    int rc;
    struct sockaddr_in addr;
    struct tcpsocket ls;
    struct tcpsocket s;
    coroutine tcpsocket_accept acc;
    coroutine tcpsocket_send snd;
    coroutine tcpsocket_term trm;
    coroutine tcpsocket_recv rcv;
    endvars;

    rc = tcpsocket_init (&ls);
    assert (rc == 0);
    rc = uv_ip4_addr ("127.0.0.1", 7000, &addr);
    assert (rc == 0);
    rc = tcpsocket_bind (&ls, (struct sockaddr*) &addr, 0);
    assert (rc == 0);
    rc = tcpsocket_listen (&ls, 10);
    assert (rc == 0);
    
    while (1) {
        rc = tcpsocket_init (&s);
        assert (rc == 0);
        call tcpsocket_accept (&acc, &ls, &s);
        wait;
        assert (@who == &acc);
        assert (@err == 0);
        printf ("accepted\n");
        call tcpsocket_send (&snd, &s, "Hello, world!", 13);
        wait;
        assert (@who == &snd);
        assert (@err == 0);
        printf ("sent\n");
        call tcpsocket_recv (&rcv, &s, buf, sizeof (buf));
        wait;
        assert (@who == &rcv);
        assert (@err == 0);
        printf ("received\n");
        call tcpsocket_term (&trm, &s);
        wait;
        assert (@who == &trm);
        assert (@err == 0);
        printf ("terminated\n");
    }
}

int main ()
{
    hello (1);
    return 0;
}

