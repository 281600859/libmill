#!./ribosome

#
# Copyright (c) 2014 Martin Sustrik  All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom
# the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#

require "clexer"

if input == nil
    $stderr.write "Input file missing.\n"
    exit
end
if input.size < 6 || input[-5..-1] != ".mill"
    $stderr.write "The input file must be a mill file.\n"
    exit
end
base_filename = input[0..-6]

################################################################################
# Helper functions and debugging tools.                                        #
################################################################################

# Dump the tokens to the stdout.
def dump(text, tokens)
    for t in tokens
        puts "#{t[0]}, #{t[1]}, #{t[2]}, \"#{text[t[1]..t[2]]}\""
        if t[3] != nil
            dump(text, t[3])
        end
    end
end

# Shift positions of all tokens beyond 'start' token by 'offset' characters.
def apply_offset(tokens, start, offset)
    for t in tokens
        t[1] += offset if t[1] > start
        t[2] += offset if t[2] > start
        if t[3] != nil
            apply_offset(t[3], start, offset)
        end
    end
end

# Replace specific token in the text by a different text.
def replace(text, tokens, token, newtext)
    text[token[1]..token[2]] = newtext
    offset = newtext.size - (token[2] - token[1] + 1)
    apply_offset(tokens, token[1], offset)
end

# Insert specified string at the give position in the text.
def insert(text, tokens, pos, newtext)
    text.insert(pos, newtext)
    apply_offset(tokens, pos, newtext.size)
end

# Split variable declaration into its constituent parts.
def parsedecl(text, tokens)
    i = tokens.size - 1
    loop do
        if i <= 0
            $stderr.write "Invalid declaration.\n"
            exit
        end
        break if tokens[i][0] != :sbraces
        i -= 1
    end
    if tokens[i][0] != :identifier
        $stderr.write "Invalid declaration.\n"
        exit
    end
    return {
        :type => text[tokens[0][1]..tokens[i - 1][2]],
        :name => text[tokens[i][1]..tokens[i][2]],
        :postfix => (i == tokens.size - 1 ? "" :
            text[tokens[i + 1][1]..tokens.last[2]])
    }
end

# Split variable declaration with optional initialisation.
def parsedeclinit (text, tokens)
    for i in 0..tokens.size - 1
        if tokens[i][0] == :eq
            t = parsedecl(text, tokens[0..i - 1])
            t[:init] = text[tokens[i + 1][1]..tokens.last[2]]
            return t
        end
    end
    return parsedecl(text, tokens)
end

################################################################################
# Tokenise the input file.                                                     #
################################################################################

text = IO.read(input)
tokens = parse(text)

################################################################################
# Make sure that the program won't collide with mill's internal variables.     #
# The user is not supposed to use identifiers with mill_* prefix.              #
################################################################################

begin
    def check(text, tokens)
        for t in tokens
            if t[0] == :identifier
                name = text[t[1]..t[2]]
                if name.size >= 5 && name[0..4] == "mill_"
                    $stderr.write "Identifiers can't start with mill_ prefix.\n"
                    exit
                end
            end
            if t[3] != nil
                check(text, t[3])
            end
        end
    end
    check(text, tokens)
end

################################################################################
#  Now we'll traverse the mill file and split it into different sections.      #
################################################################################

# Current position in the token array.
i = 0

# Sections array will consist of the following items
# :include     C includes at the beginning of the mill file
# :rawc        Section containing raw C code
# :coroutine   Standard mill coroutine definition
# :extension   Coroutine extension
sections = []

################################################################################
#  Process includes.                                                           #
################################################################################

begin

    # Parse the includes section.
    for i in 0..tokens.size - 1
        break if tokens[i][0] != :include
    end
    includes_end = i == tokens.size ? text.size : tokens[i][1] 
    sections << {
        :type => :include,
        :text => text[0..includes_end - 1]
    }

    # Make sure there are no more includes in the rest of the file.
    def no_includes(token)
        if token[0] == :include
            $stderr.write "All includes must be in the beginning of the file.\n"
            exit
        end
        if [:braces, :cbraces, :sbraces].include? token[0]
            no_includes token[3]
        end
    end
    for j in i..tokens.size - 1
        no_includes tokens[j]
    end
end

################################################################################
#  Split the text into coroutine definitions and interleaved chunks of raw C.  #
################################################################################

loop do

    # Find the start of next coroutine.
    # Treat anything that precedes it as raw C code.
    cstart = i
    cstop = nil
    cotype = nil
    cotext = nil
    cotokens = nil
    loop do

        if tokens[i][0] == :end
            cstop = i
            break;
        end

        if(tokens[i][0] == :coroutine && tokens [i + 1][0] == :identifier &&
              tokens[i + 2][0] == :braces && tokens[i + 3][0] == :cbraces)
            cstop = i
            cotype = :coroutine
            cotext = text[tokens[i][1]..tokens[i + 3][2]]
            cotokens = tokens[i..i + 3]
            i += 4
            break;
        end

        if(tokens[i][0] == :coroutine && tokens [i + 1][0] == :identifier &&
              tokens[i + 2][0] == :colon && tokens[i + 3][0] == :identifier &&
              tokens [i + 4][0] == :cbraces)
            cstop = i
            cotype = :extension
            cotext = text[tokens[i][1]..tokens[i + 4][2]]
            cotokens = tokens[i..i + 4]
            i += 5
            break;
        end

        i += 1;
    end

    # Chunk of raw C.
    if cstart != cstop
        sections << {
            :type => :rawc,
            :text => text[tokens[cstart][1]..tokens[cstop][1] - 1],
            :tokens => tokens[cstart..cstop - 1]
        }
        apply_offset(sections.last[:tokens], 0, -sections.last[:tokens][0][1])
    end

    # End of file.
    break if tokens[i][0] == :end

    # Create the coroutine section.
    sections << {
        :type => cotype,
        :text => cotext,
        :tokens => cotokens
    }
    apply_offset(sections.last[:tokens], 0, -sections.last[:tokens][0][1])

end

################################################################################
#  Process raw C code. There's nothing to do except replacing coroutines       #
#  by the corresponding C structs.                                             #
################################################################################

begin
    def expand_coroutines(text, alltokens, tokens)
        for i in 0..tokens.size - 1
            if tokens[i][0] == :coroutine
                if tokens[i + 1][0] != :identifier
                    $syserr.write "'coroutine' keyword should be followed by the coroutine name.\n"
                    exit
                end
                name = text[tokens[i + 1][1]..tokens[i + 1][2]]
                replace(text, alltokens, tokens[i], "struct mill_coroutine_#{name}")
                replace(text, alltokens, tokens[i + 1], "")
            end
            if tokens[i][3] != nil
                expand_coroutines(text, alltokens, tokens[i][3])
            end
        end
    end

    for s in sections
        if s[:type] == :rawc
            expand_coroutines(s[:text], s[:tokens], s[:tokens])
        end
    end
end

################################################################################
#  Process coroutine sections.                                                 #
################################################################################

for i in 0..sections.size - 1
    if sections[i][:type] == :coroutine
        text = sections[i][:text]
        tokens = sections[i][:tokens]

        # Coroutine name.
        name = text[tokens[1][1]..tokens[1][2]]

        # Coroutine argument list.
        args = []
        argtokens = tokens[2][3]
        start = 0
        for j in 0..argtokens.size - 1
            break if argtokens[j][0] == :end && j == start
            if [:comma, :end].include? argtokens[j][0]
                args << parsedecl(text, argtokens[start..j - 1])
                start = j + 1
            end
        end

        # Coroutine body. Split it into variables part and the executable code.
        # 'endvars' statement is the delimiter between the two.
        bodytokens = tokens[3][3]
        bodytokens.unshift [:whitespace, bodytokens [3][1] + 1, tokens[0][1] - 1]
        for j in 1..bodytokens.size - 1
            break if bodytokens[j][0] == :endvars
        end
        if j == bodytokens.size - 1
            j = 0
        else
            if bodytokens[j + 1][0] != :semicolon
                $stderr.write "'endvars' must be followed by a semicolon.\n"
                exit
            end
        end

        # Parse the local variables.
        vars = []
        start = 1
        for k in 1..j
            if bodytokens[k][0] == :semicolon
                vars << parsedeclinit(text, bodytokens[start..k - 1])
                start = k + 1
            end
        end

        # Leave only the executable code in text & tokens.
        j += 1 if bodytokens[j][0] == :endvars
        wstoken = [:whitespace, bodytokens [j][2] + 1, bodytokens[j + 1][1] - 1]
        bodytokens = bodytokens[j + 1..-1]
        bodytokens.unshift(wstoken)
        text = text[bodytokens[0][1]..bodytokens[-2][2]]
        apply_offset(bodytokens, 0, -bodytokens[0][1])

        sections[i] = {
            :type => :coroutine,
            :name => name,
            :args => args,
            :vars => vars,
            :text => text,
            :tokens => bodytokens
        }
    end
end

################################################################################
#  Process coroutine extensions sections.                                      #
################################################################################

for i in 0..sections.size - 1
    if sections[i][:type] == :extension
        text = sections[i][:text]
        tokens = sections[i][:tokens]
        name = text[tokens[1][1]..tokens[1][2]]
        base = text[tokens[3][1]..tokens[3][2]]
        tokens = tokens[4][3]
        vars = []
        start = 0
        for j in 0..tokens.size - 1
            if tokens[j][0] == :semicolon
                vars << parsedecl(text, tokens[start..j - 1])
                start = j + 1
            end
        end
        if start != j
            $syserr.write "Trailing tokens in coroutine body.\n"
            exit;
        end
        sections[i] = {
            :type => :extension,
            :name => name,
            :base => base,
            :vars => vars
        }
    end
end

################################################################################
# Process the executable parts of the coroutines.                              #
################################################################################

for s in sections
    if s[:type] == :coroutine

        # Expand references to the local variables.
        def expand_vars(text, alltokens, tokens, locals)
            for i in 0..tokens.size - 1
                if tokens[i][0] == :identifier && (i == 0 || tokens[i - 1][0] != :struct)
                    idname = text[tokens[i][1]..tokens[i][2]]
                    if locals.include? idname
                        replace(text, alltokens, tokens[i], "(cf->#{idname})")
                    end
                elsif tokens[i][3] != nil
                    expand_vars(text, alltokens, tokens[i][3], locals)
                end
            end
        end
        locals = []
        for a in s[:args]
            locals << a[:name]
        end
        for v in s[:vars]
            locals << v[:name]
        end
        expand_vars(s[:text], s[:tokens], s[:tokens], locals)

        # Expand mill keywords.
        def expand_keywords(text, alltokens, tokens, state)
            for i in 0..tokens.size - 1

                if tokens[i][0] == :call
                    start = i
                    i += 1
                    if tokens[i][0] == :identifier
                        cf = "0"
                    elsif tokens[i][0] == :braces
                        cf = text[tokens[i][1]..tokens[i][2]]
                        i += 1
                    else
                        $stderr.write "'call' keyword should be followed either by coroutine name or pointer to the coframe.\n"
                        exit
                    end
                    if tokens[i][0] != :identifier
                        $stderr.write "Coroutine name missing after 'call'.\n"
                        exit
                    end
                    name = text[tokens[i][1]..tokens[i][2]]
                    i += 1
                    if tokens[i][0] != :braces
                        $stderr.write "Argument list missing after 'call'.\n"
                        exit
                    end


                    replace(text, alltokens, tokens[start], "mill_call_#{name}")
                    if tokens[start + 1][0] == :braces
                        replace(text, alltokens, tokens[start + 1], "")
                    end
                    replace(text, alltokens, tokens[i - 1], "")
                    delim = tokens[i][3].size == 1 ? "" : ", ";
                    insert(text, alltokens, tokens[i][1] + 1, "#{cf}, &mill_type_#{name}, cf->mill_cfh.loop, cf#{delim}")

                elsif tokens[i][0] == :wait
                    if tokens[i + 1][0] != :braces
                        $stderr.write "'wait' should be followed by argument list.\n"
                        exit
                    end
                    replace(text, alltokens, tokens[i], "mill_wait")
                    state += 1
                    insert(text, alltokens, tokens[i + 1][1] + 1, "#{state}, ")

                elsif tokens[i][0] == :return
                    if tokens[i + 1][0] != :semicolon
                        $stderr.write "'return' statement must be followed by semicolon.\n"
                        exit
                    end
                    replace(text, alltokens, tokens[i], "mill_return")

                elsif tokens[i][0] == :raise
                    for j in i..tokens.size - 1
                       break if tokens[j][0] == :semicolon
                    end
                    if tokens[j][0] != :semicolon
                        $stderr.write "'raise' statement must be followed by semicolon.\n"
                        exit
                    end
                    replace(text, alltokens, tokens[i], "mill_raise (")
                    replace(text, alltokens, tokens[j], ");")
                    i = j

                elsif tokens[i][0] == :cancel
                    replace(text, alltokens, tokens[i], "mill_cancel")

                elsif tokens[i][0] == :cancelall
                    replace(text, alltokens, tokens[i], "mill_cancelall")

                elsif tokens[i][0] == :typeof
                    if tokens[i + 1][0] != :braces || tokens[i + 1][3].size < 1
                        $stderr.write "'typeof' should be followed by an argument list.\n"
                        exit
                    end
                    if tokens[i + 1][3][0][0] == :coroutine
                        if tokens[i + 1][3].size != 3
                            $stderr.write "'typeof' requires single parameter.\n"
                            exit
                        end
                        replace(text, alltokens, tokens[i], "(&mill_type_#{text[tokens[i + 1][3][1][1]..tokens[i + 1][3][1][2]]})")
                        replace(text, alltokens, tokens[i + 1], "")
                    else
                        replace(text, alltokens, tokens[i], "mill_typeof")
                    end

                elsif(tokens[i][0] == :identifier &&
                        ["tcpsocket_init"].include?(text[tokens[i][1]..tokens[i][2]]) &&
                        tokens[i + 1][0] == :braces)
                    insert(text, alltokens, tokens[i + 1][2], ", cf->mill_cfh.loop")

                elsif tokens[i][3] != nil
                    state = expand_keywords(text, alltokens, tokens[i][3], state)
                end

            end
            return state;
        end
        s[:laststate] = expand_keywords(s[:text], s[:tokens], s[:tokens], 0) + 1
    end
end

################################################################################
# Generate the .h file.                                                        #
################################################################################

./!output base_filename + ".h"

./* @{Time.now}:
.   This file was generated from @{input} */
.
.#include "mill.h"
.
for s in sections

    if s[:type] == :include
.@{s[:text]}
.
        next
    end

    if s[:type] == :coroutine
.extern const struct mill_type mill_type_@{s[:name]};
.
.struct mill_cf_@{s[:name]} {
.
.    /* Generic coframe header. */
.    struct mill_cfh mill_cfh;
        if !s[:args].empty?
.
.    /* Coroutine arguments. */
        end
        for a in s[:args]
.    @{a[:type]} @{a[:name]}@{a[:postfix]};
        end
        if !s[:vars].empty?
.
.    /* Local variables. */
        end
        for v in s[:vars]
.    @{v[:type]} @{v[:name]}@{v[:postfix]};
        end
.};
.
.void *mill_call_@{s[:name]} (
.    void *cf,
.    const struct mill_type *type,
.    struct mill_loop *loop,
.    void *parent
        for a in s[:args]
.    /+,
.    @{a[:type]} @{a[:name]}@{a[:postfix]}
        end
./+);
.
.int @{s[:name]} (
./!separate ", "
        for a in s[:args]
.    @{a[:type]} @{a[:name]}@{a[:postfix]}
        end
./+);
.
        next
    end

    if s[:type] == :extension
.extern const struct mill_type mill_type_@{s[:name]};
.
.struct mill_cf_@{s[:name]} {
.
.    /* Coframe of the base coroutine. */
.    struct mill_cf_@{s[:base]} mill_base;
        if !s[:vars].empty?
.
.    /* Coroutine extension variables. */
        end
        for v in s[:vars]
.    @{v[:type]} @{v[:name]}@{v[:postfix]};
        end
.};
.
.#define mill_call_@{s[:name]} mill_call_@{s[:base]}
.
.#define @{s[:name]} @{s[:base]}
.
        next
    end

end
.

################################################################################
# Generate the .c file.                                                        #
################################################################################

./!output base_filename + ".c"

./* @{Time.now}:
.   This file was generated from @{input} */
.
.#include "@{base_filename}.h"
.
for s in sections
    if s[:type] == :rawc
.@{s[:text]}
.
    elsif s[:type] == :coroutine
.static void mill_handler_@{s[:name]} (void *cfptr, void *event)
.{
.    mill_handlerimpl_prologue (@{s[:name]});
.
.    /* Jump to the place where the coroutine was interrupted the last time. */
.    switch (cf->mill_cfh.state) {
.    case 0:
.        break;
for i in 1..s[:laststate]
.    case @{i}:
.        goto mill_state@{i};
end
.    default:
.        assert (0);
.    }
.
.    @{s[:text]}
.
.    mill_handlerimpl_epilogue (@{s[:name]}, @{s[:laststate]});
.}
.
.const struct mill_type mill_type_@{s[:name]} = {mill_type_tag, mill_handler_@{s[:name]}};
.
.void *mill_call_@{s[:name]} (
.    void *cfptr,
.    const struct mill_type *type,
.    struct mill_loop *loop,
.    void *parent
for a in s[:args]
.    /+,
.    @{a[:type]} @{a[:name]}@{a[:postfix]}
end
./+)
.{
.    mill_callimpl_prologue (@{s[:name]});
for a in s[:args]
.    cf->@{a[:name]} = @{a[:name]};
end
for v in s[:vars]
    if v[:init] != nil
.    cf->@{v[:name]} = @{v[:init]};
    end
end
.    mill_callimpl_epilogue (@{s[:name]});
.}
.
.int @{s[:name]} (
./!separate ", "
for a in s[:args]
.    @{a[:type]} @{a[:name]}@{a[:postfix]}
end
./+)
.{
.    mill_synccallimpl_prologue (@{s[:name]});
.    mill_call_@{s[:name]} (&cf, &mill_type_@{s[:name]}, &loop, 0
for a in s[:args]
.    /+, @{a[:name]}
end
./+);
.    mill_synccallimpl_epilogue (@{s[:name]});
.}
.

    elsif s[:type] == :extension
.static void mill_handler_@{s[:name]} (void *cfptr, void *event)
.{
.    /*  Pass the event handling to the base coroutine. */
.    mill_type_@{s[:base]}.handler (cfptr, event);
.}
.
.const struct mill_type mill_type_@{s[:name]} = {mill_type_tag, mill_handler_@{s[:name]}};
.
    end
end

